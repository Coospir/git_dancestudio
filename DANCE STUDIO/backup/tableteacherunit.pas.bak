unit tableTeacherUnit;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, FileUtil, PrintersDlgs, Forms, Controls, Graphics, Dialogs,
  StdCtrls, ActnList, ComCtrls, Buttons, addNewTeacherUnit, XMLRead, XMLWrite,
  DOM, Printers, MaskEdit, Windows;

type

  { TTableTeachersForm }

  TTableTeachersForm = class(TForm)
    ChangeSelectedTeacherLabel: TLabel;
    NumberIdLabel: TLabel;
    ReadFromXML: TButton;
    SaveNewInfoTeacherBtn: TButton;
    NewDanceDirectionTeacher: TComboBox;
    NewNameTeacher: TEdit;
    NewEmailTeacher: TEdit;
    NewAgeTeacher: TEdit;
    NewSerialPassTeacher: TEdit;
    NewNumberPassTeacher: TEdit;
    NewTelephoneNumberTeacher: TMaskEdit;
    PrintBtn: TButton;
    changeLineBtn: TButton;
    grpboxTeacherListView: TGroupBox;
    pageControlTeacher: TPageControl;
    PrintDialog1: TPrintDialog;
    saveToXmlFile: TButton;
    delTeacher: TButton;
    btnForListView: TTabSheet;
    btnForFunctions: TTabSheet;
    TeacherListView: TListView;
    procedure ReadFromXMLClick(Sender: TObject);
    procedure grpboxTeacherListViewClick(Sender: TObject);
   // procedure FormClose(Sender: TObject; var CloseAction: TCloseAction);
    procedure PrintBtnClick(Sender: TObject);
    procedure changeLineBtnClick(Sender: TObject);
    procedure delTeacherClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure readFromXmlFileClick(Sender: TObject);
    procedure SaveNewInfoTeacherBtnClick(Sender: TObject);
    procedure saveToXmlFileClick(Sender: TObject);
    procedure TeacherListViewDragDrop(Sender, Source: TObject; X, Y: Integer);
    procedure TeacherListViewDragOver(Sender, Source: TObject; X, Y: Integer;
      State: TDragState; var Accept: Boolean);
    procedure TeacherListViewSelectItem(Sender: TObject; Item: TListItem;
      Selected: Boolean);
  private
    { private declarations }
    numEditingRec : integer;

  public
    XMLfile: TXMLDocument;
    { public declarations }
  end;

type
    TMyThread = class(TThread)
    private
      //cpTeacherArray : cTeacherArray;
      procedure successSaveXML();
      procedure errorSaveXML();
    public
      constructor Create(var copyTeacherArray : cTeacherArray);
    protected
      procedure Execute; override;
    end;

var
  TableTeachersForm: TTableTeachersForm;
  Item : TListItem;
  MyThread : TMyThread;
  flag : boolean;

implementation
uses MainMenu;

{$R *.lfm}

{ TTableTeachersForm }

procedure TMyThread.successSaveXML;
begin
  ShowMessage('Записано в файл: ' + 'dance_studio.xml');
end;

procedure TMyThread.errorSaveXML;
begin
  ShowMessage('Пустая таблица!');
end;

constructor TMyThread.Create(var copyTeacherArray : cTeacherArray);
begin
  copyTeacherArray := TeacherArray;
end;

procedure TMyThread.Execute();
var RootNode, ElementNode, ItemNode, TextNode, PassNode : TDOMNode;
    Document : TXMLDocument;
    i : integer;
  begin
    if countTeachers <> 0 then
  begin
    Document:=TXMLDocument.Create;
    with Document do
    begin
      ElementNode:=Document.CreateElement('Element');
      for i:= 1 to countTeachers do
        begin
          ItemNode:=Document.CreateElement('Teacher_Information');
          TDOMElement(ItemNode).SetAttribute('Teacher_ID', IntToStr(TeacherArray[i].idTeacher));
          TDOMElement(ItemNode).SetAttribute('Teacher_Name', TeacherArray[i].TeacherName);
          TDOMElement(ItemNode).SetAttribute('Teacher_Age', IntToStr(TeacherArray[i].TeacherAge));
          TDOMElement(ItemNode).SetAttribute('Teacher_SerialPassport', TeacherArray[i].SerialPassport);
          TDOMElement(ItemNode).SetAttribute('Teacher_NumberPassport', IntToStr(TeacherArray[i].NumberPassport));
          TDOMElement(ItemNode).SetAttribute('Teacher_Email', TeacherArray[i].TeacherEmail);
          TDOMElement(ItemNode).SetAttribute('Teacher_TelephoneNumber', TeacherArray[i].TelephoneNumber);
          case TeacherArray[i].DanceDirection of
               HipHop: TDOMElement(ItemNode).SetAttribute('Style','HipHop');
               Krump: TDOMElement(ItemNode).SetAttribute('Style','Krump');
               JFunk: TDOMElement(ItemNode).SetAttribute('Style','JazzFunk');
               Break: TDOMElement(ItemNode).SetAttribute('Style','Breakdance');
               Improvis: TDOMElement(ItemNode).SetAttribute('Style','Improvisation');
               LadyHop: TDOMElement(ItemNode).SetAttribute('Style','LadyHop');
               Plastic: TDOMElement(ItemNode).SetAttribute('Style','PlasticDance');
               Contemp: TDOMElement(ItemNode).SetAttribute('Style','Contemporary');
               BalDance: TDOMElement(ItemNode).SetAttribute('Style','BalDance');
               VostokDance: TDOMElement(ItemNode).SetAttribute('Style','VostokDance');
               SportAcro: TDOMElement(ItemNode).SetAttribute('Style','SportAcrobatics');
          end;
          ElementNode.AppendChild(ItemNode);
        end;
    end;
    Document.AppendChild(ElementNode);
    writeXMLFile(Document, 'dance_studio.xml');
    Synchronize(@successSaveXML);
  end else Synchronize(@errorSaveXML);
end;

procedure TTableTeachersForm.FormCreate(Sender: TObject);
var
  i: integer;
  PassNode : TDOMNode;
  Document : TXMLDocument;
  sIdTeacher,sNameTeacher,sAgeTeacher, sSerialPassTeacher, sNumberPassTeacher, sEmailTeacher, sTelephoneTeacher, sDanceDirectionTeacher : string;
  Element : TDOMNode;
  s: string;
begin
  flag:=false;
  case NewDanceDirectionTeacher.ItemIndex of
      0:TeacherArray[countTeachers+1].DanceDirection:=HipHop;
      1:TeacherArray[countTeachers+1].DanceDirection:=Krump;
      2:TeacherArray[countTeachers+1].DanceDirection:=JFunk;
      3:TeacherArray[countTeachers+1].DanceDirection:=Break;
      4:TeacherArray[countTeachers+1].DanceDirection:=Improvis;
      5:TeacherArray[countTeachers+1].DanceDirection:=LadyHop;
      6:TeacherArray[countTeachers+1].DanceDirection:=Plastic;
      7:TeacherArray[countTeachers+1].DanceDirection:=Contemp;
      8:TeacherArray[countTeachers+1].DanceDirection:=BalDance;
      9:TeacherArray[countTeachers+1].DanceDirection:=VostokDance;
      10:TeacherArray[countTeachers+1].DanceDirection:=SportAcro;
    end;
  Left:=0;
  Top:=0;
  for i:=1 to countTeachers do
    begin
      Item := TeacherListView.Items.Add;
      Item.Caption := (IntToStr(TeacherArray[i].idTeacher));
      Item.SubItems.Add(TeacherArray[i].TeacherName);
      Item.SubItems.Add(IntToStr(TeacherArray[i].TeacherAge));
      Item.SubItems.Add(TeacherArray[i].SerialPassport);
      Item.SubItems.Add(IntToStr(TeacherArray[i].NumberPassport));
      Item.SubItems.Add(TeacherArray[i].TeacherEmail);
      Item.SubItems.Add(TeacherArray[i].TelephoneNumber);
        case TeacherArray[i].DanceDirection of
          HipHop: Item.SubItems.Add('Хип-Хоп');
          Krump: Item.SubItems.Add('Крамп');
          JFunk: Item.SubItems.Add('Джазз-Фанк');
          Break: Item.SubItems.Add('Брейкданс');
          Improvis: Item.SubItems.Add('Импровизация');
          LadyHop: Item.SubItems.Add('Лэдис Хип-Хоп');
          Plastic: Item.SubItems.Add('Стрип-Пластика');
          Contemp: Item.SubItems.Add('Контемпорари');
          BalDance: Item.SubItems.Add('Бальные танцы');
          VostokDance: Item.SubItems.Add('Восточные танцы');
          SportAcro: Item.SubItems.Add('Спортивная акроботика');
        end;
    end;
  end;

procedure TTableTeachersForm.readFromXmlFileClick(Sender: TObject);
var
  i: integer;
  PassNode : TDOMNode;
  Document : TXMLDocument;
  sIdTeacher,sNameTeacher,sAgeTeacher, sSerialPassTeacher, sNumberPassTeacher, sEmailTeacher, sTelephoneTeacher, sDanceDirectionTeacher : string;
  Element : TDOMNode;
  s: string;
begin
  readXMLFile(Document,'dance_studio.xml');
  Element:=Document.FirstChild.FirstChild;
  i := 0;
  try
    try
      repeat
        s:=Element.NodeName;
        sIdTeacher:=Element.Attributes.GetNamedItem('Teacher_ID').NodeValue;
        sNameTeacher:=Element.Attributes.GetNamedItem('Teacher_Name').NodeValue;
        sAgeTeacher:=Element.Attributes.GetNamedItem('Teacher_Age').NodeValue;
        sSerialPassTeacher:=Element.Attributes.GetNamedItem('Teacher_SerialPassport').NodeValue;
        sNumberPassTeacher:=Element.Attributes.GetNamedItem('Teacher_NumberPassport').NodeValue;
        sEmailTeacher:=Element.Attributes.GetNamedItem('Teacher_Email').NodeValue;
        sTelephoneTeacher:=Element.Attributes.GetNamedItem('Teacher_TelephoneNumber').NodeValue;
        sDanceDirectionTeacher:=Element.Attributes.GetNamedItem('Style').NodeValue;
       // if(sDanceDirectionTeacher =
        i:=i+1;
        Element:=Element.NextSibling;

        Item := TeacherListView.Items.Add;
        Item.Caption :=sIdTeacher;
        Item.SubItems.Add(sNameTeacher);
        Item.SubItems.Add(sAgeTeacher);
        Item.SubItems.Add(sSerialPassTeacher);
        Item.SubItems.Add(sNumberPassTeacher);
        Item.SubItems.Add(sEmailTeacher);
        Item.SubItems.Add(sTelephoneTeacher);
          case TeacherArray[i].DanceDirection of
            HipHop: Item.SubItems.Add('Хип-Хоп');
            Krump: Item.SubItems.Add('Крамп');
            JFunk: Item.SubItems.Add('Джазз-Фанк');
            Break: Item.SubItems.Add('Брейкданс');
            Improvis: Item.SubItems.Add('Импровизация');
            LadyHop: Item.SubItems.Add('Лэдис Хип-Хоп');
            Plastic: Item.SubItems.Add('Стрип-Пластика');
            Contemp: Item.SubItems.Add('Контемпорари');
            BalDance: Item.SubItems.Add('Бальные танцы');
            VostokDance: Item.SubItems.Add('Восточные танцы');
            SportAcro: Item.SubItems.Add('Спортивная акроботика');
          end;
      TeacherArray[i].idTeacher:=StrToInt(sIdTeacher);
      TeacherArray[i].TeacherName:=sNameTeacher;
      TeacherArray[i].TeacherAge:=StrToInt(sAgeTeacher);
      TeacherArray[i].SerialPassport:=sSerialPassTeacher;
      TeacherArray[i].NumberPassport:=StrToInt(sNumberPassTeacher);
      TeacherArray[i].TeacherEmail:=sEmailTeacher;
      TeacherArray[i].TelephoneNumber:=sTelephoneTeacher;
      countTeachers:=countTeachers+1;
      until Element = NIL;
    except
      ShowMessage('Ошибка чтения XML - файла!');
    end;
    finally
    Document.Free;
  end;
end;

procedure TTableTeachersForm.SaveNewInfoTeacherBtnClick(Sender: TObject);
begin
    if(NewDanceDirectionTeacher.ItemIndex = -1) then
     begin
       ShowMessage('Выберите стиль преподавателя!');
     end else if(countTeachers >= maxCountTeachers) then ShowMessage('Достигнуто максимальное количество записей "Преподаватели"!') else
      if(StrToInt(NewAgeTeacher.Text) < 18) then ShowMessage('Возраст преподавателя слишком мал!') else
       begin
         TeacherArray[numEditingRec].TeacherName:=NewNameTeacher.Text;
         TeacherArray[numEditingRec].TeacherAge:=StrToInt(NewAgeTeacher.Text);
         TeacherArray[numEditingRec].SerialPassport:=NewSerialPassTeacher.Text;
         TeacherArray[numEditingRec].NumberPassport:=StrToInt(NewNumberPassTeacher.Text);
         TeacherArray[numEditingRec].TeacherEmail:=NewEmailTeacher.Text;
         TeacherArray[numEditingRec].TelephoneNumber:=NewTelephoneNumberTeacher.Text;
         case NewDanceDirectionTeacher.ItemIndex of
           0:TeacherArray[numEditingRec].DanceDirection:=HipHop;
           1:TeacherArray[numEditingRec].DanceDirection:=Krump;
           2:TeacherArray[numEditingRec].DanceDirection:=JFunk;
           3:TeacherArray[numEditingRec].DanceDirection:=Break;
           4:TeacherArray[numEditingRec].DanceDirection:=Improvis;
           5:TeacherArray[numEditingRec].DanceDirection:=LadyHop;
           6:TeacherArray[numEditingRec].DanceDirection:=Plastic;
           7:TeacherArray[numEditingRec].DanceDirection:=Contemp;
           8:TeacherArray[numEditingRec].DanceDirection:=BalDance;
           9:TeacherArray[numEditingRec].DanceDirection:=VostokDance;
           10:TeacherArray[numEditingRec].DanceDirection:=SportAcro;
         end;

         self.TeacherListView.Selected.SubItems[0] := (TeacherArray[numEditingRec].TeacherName);
         self.TeacherListView.Selected.SubItems[1] := (IntToStr(TeacherArray[numEditingRec].TeacherAge));
         self.TeacherListView.Selected.SubItems[2] := (TeacherArray[numEditingRec].SerialPassport);
         self.TeacherListView.Selected.SubItems[3] := (IntToStr(TeacherArray[numEditingRec].NumberPassport));
         self.TeacherListView.Selected.SubItems[4] := (TeacherArray[numEditingRec].TeacherEmail);
         self.TeacherListView.Selected.SubItems[5] := (TeacherArray[numEditingRec].TelephoneNumber);
         case TeacherArray[numEditingRec].DanceDirection of
             HipHop: Item.SubItems[6] := 'Хип-Хоп';
             Krump: Item.SubItems[6] := 'Крамп';
             JFunk: Item.SubItems[6] := 'Джазз-Фанк';
             Break: Item.SubItems[6] := 'Брейкданс';
             Improvis: Item.SubItems[6] :='Импровизация';
             LadyHop: Item.SubItems[6] := 'Лэдис Хип-Хоп';
             Plastic: Item.SubItems[6] := 'Стрип-Пластика';
             Contemp: Item.SubItems[6] := 'Контемпорари';
             BalDance: Item.SubItems[6] := 'Бальные танцы';
             VostokDance: Item.SubItems[6] := 'Восточные танцы';
             SportAcro: Item.SubItems[6] := 'Спортивная акроботика';
           end;
            ShowMessage('Данные успешно сохранены!');
       end;
end;


procedure TTableTeachersForm.saveToXmlFileClick(Sender: TObject);
begin
  copyTeacherArray := TeacherArray;
  MyThread := TMyThread.Create(TeacherArray);
  MyThread.Execute;
end;

procedure TTableTeachersForm.TeacherListViewDragDrop(Sender, Source: TObject;
  X, Y: Integer);
  var DropItem,CurrentItem:TListItem; i,n:integer;
begin
  if Sender = Source then
    with TListView(Sender) do begin
      DropItem:= GetItemAt(X, Y);
        if DropItem<>nil then
          begin
          CurrentItem:=TListItem.Create(Items);
          CurrentItem.Assign(Selected);
          Selected.Delete;
          n:=DropItem.Index;
          AddItem('',nil);
        for I :=items.Count-1  downto DropItem.Index+1 do begin
           items.Item[i].Assign(items.Item[i-1]);
        end;
    Items.Item[n].Assign(CurrentItem);
    end;
    end;
end;


procedure TTableTeachersForm.TeacherListViewDragOver(Sender, Source: TObject;
  X, Y: Integer; State: TDragState; var Accept: Boolean);
begin
  with Sender as TListView do
    Accept := (Sender = TeacherListView) and (GetItemAt(X, Y) <> Selected);
end;


procedure TTableTeachersForm.delTeacherClick(Sender: TObject);
var i : integer;
    indexToDel : integer;
begin
  if(countTeachers = 0) then ShowMessage('Удаление невозможно: таблица пуста.') else
    begin
      if(TeacherListView.Selected = NIL) then
        begin
          ShowMessage('Удаление невозможно: не выбрано поле для удаления!');
        end else
        begin
          indexToDel := TeacherListView.Selected.Index;
          TeacherListView.Selected.Delete();
          for i := indexToDel+1 to countTeachers-1 do
          //Вот здеся смещение влево
            TeacherArray[i] := TeacherArray[i+1];
            dec(countTeachers);
            MainForm.restartStatClick;
        end;
    end;
end;


procedure TTableTeachersForm.ReadFromXMLClick(Sender: TObject);
var
  i: integer;
  PassNode : TDOMNode;
  Document : TXMLDocument;
  sIdTeacher,sNameTeacher,sAgeTeacher, sSerialPassTeacher, sNumberPassTeacher, sEmailTeacher, sTelephoneTeacher, sDanceDirectionTeacher : string;
  Element : TDOMNode;
  s: string;
begin
  TeacherListView.Clear;
  countTeachers:=0;
  readXMLFile(Document,'dance_studio.xml');
  Element:=Document.FirstChild.FirstChild;
  i := 0;
  try
    try
      repeat
        s:=Element.NodeName;
        sIdTeacher:=Element.Attributes.GetNamedItem('Teacher_ID').NodeValue;
        sNameTeacher:=Element.Attributes.GetNamedItem('Teacher_Name').NodeValue;
        sAgeTeacher:=Element.Attributes.GetNamedItem('Teacher_Age').NodeValue;
        sSerialPassTeacher:=Element.Attributes.GetNamedItem('Teacher_SerialPassport').NodeValue;
        sNumberPassTeacher:=Element.Attributes.GetNamedItem('Teacher_NumberPassport').NodeValue;
        sEmailTeacher:=Element.Attributes.GetNamedItem('Teacher_Email').NodeValue;
        sTelephoneTeacher:=Element.Attributes.GetNamedItem('Teacher_TelephoneNumber').NodeValue;
        sDanceDirectionTeacher:=Element.Attributes.GetNamedItem('Style').NodeValue;
       // if(sDanceDirectionTeacher =
        i:=i+1;
        Element:=Element.NextSibling;

        Item := TeacherListView.Items.Add;
        Item.Caption :=sIdTeacher;
        Item.SubItems.Add(sNameTeacher);
        Item.SubItems.Add(sAgeTeacher);
        Item.SubItems.Add(sSerialPassTeacher);
        Item.SubItems.Add(sNumberPassTeacher);
        Item.SubItems.Add(sEmailTeacher);
        Item.SubItems.Add(sTelephoneTeacher);
          case TeacherArray[i].DanceDirection of
            HipHop: Item.SubItems.Add('Хип-Хоп');
            Krump: Item.SubItems.Add('Крамп');
            JFunk: Item.SubItems.Add('Джазз-Фанк');
            Break: Item.SubItems.Add('Брейкданс');
            Improvis: Item.SubItems.Add('Импровизация');
            LadyHop: Item.SubItems.Add('Лэдис Хип-Хоп');
            Plastic: Item.SubItems.Add('Стрип-Пластика');
            Contemp: Item.SubItems.Add('Контемпорари');
            BalDance: Item.SubItems.Add('Бальные танцы');
            VostokDance: Item.SubItems.Add('Восточные танцы');
            SportAcro: Item.SubItems.Add('Спортивная акроботика');
          end;
      TeacherArray[i].idTeacher:=StrToInt(sIdTeacher);
      TeacherArray[i].TeacherName:=sNameTeacher;
      TeacherArray[i].TeacherAge:=StrToInt(sAgeTeacher);
      TeacherArray[i].SerialPassport:=sSerialPassTeacher;
      TeacherArray[i].NumberPassport:=StrToInt(sNumberPassTeacher);
      TeacherArray[i].TeacherEmail:=sEmailTeacher;
      TeacherArray[i].TelephoneNumber:=sTelephoneTeacher;
      countTeachers:=countTeachers+1;
      until Element = NIL;
    except
      ShowMessage('Ошибка чтения XML - файла!');
    end;
    finally
    Document.Free;
  end;
    MainForm.restartStatClick;
end;

procedure TTableTeachersForm.grpboxTeacherListViewClick(Sender: TObject);
begin

end;

//procedure TTableTeachersForm.FormClose(Sender: TObject;
//  var CloseAction: TCloseAction);
//begin
//  copyTeacherArray := TeacherArray;
//  MyThread := TMyThread.Create(TeacherArray);
//  MyThread.Execute;
//end;

function Scale(Value: longint; Pct: integer): longint;
begin
 if Pct > 100 then
  Pct := 100
 else if Pct < 0 then
  Pct := 0;

 if Pct = 0 then
  Result := Value
 else
  Result := Value + MulDiv(Value, Pct, 100);
end;

procedure PrintListView(intro:String; lwToSave:TListView);
var
 LinesHeight, LineShift, WordWidth, ListViewWordWidth,
     LineWidth, CellWidth: Longint;
 iTop, iLeft, i, row:Integer;
 TextRect:TRect;
begin
 with TPrintDialog.Create(nil) do
  begin
    Options := [poWarning];
      if not Execute then
        exit;
      Free;
  end;
 Printer.Title := intro;
 Printer.BeginDoc;
 Printer.Canvas.Font.Assign(lwToSave.Font);
 LinesHeight := Scale(Printer.Canvas.TextHeight('M'), 20);
 LineShift := (LinesHeight-Printer.Canvas.TextHeight('M')) div 2;
 WordWidth := Printer.Canvas.TextWidth('0');
 ListViewWordWidth := lwToSave.Canvas.TextWidth('0');
 iTop:=LinesHeight*2;
 LineWidth:=0;
 // Print Header
 Printer.Canvas.Font.Style:=[fsBold];
 iLeft := WordWidth*5;
 Printer.Canvas.MoveTo(iLeft, iTop);
 Printer.Canvas.LineTo(iLeft, iTop+LinesHeight);
 for i := 0 to lwToSave.Columns.Count - 1 do
  begin
   Printer.Canvas.TextOut(iLeft+LineShift, iTop+LineShift, lwToSave.Columns[i].Caption);
   CellWidth:=LineShift*2+lwToSave.Columns[i].Width*WordWidth div ListViewWordWidth;
   LineWidth:=LineWidth+CellWidth;
   iLeft := iLeft+CellWidth;
   Printer.Canvas.MoveTo(iLeft, iTop);
   Printer.Canvas.LineTo(iLeft, iTop+LinesHeight);
  end;
 iLeft := WordWidth*5;
 Printer.Canvas.MoveTo(iLeft, iTop);
 Printer.Canvas.LineTo(iLeft+LineWidth, iTop);
 Printer.Canvas.MoveTo(iLeft, iTop+LinesHeight);
 Printer.Canvas.LineTo(iLeft+LineWidth, iTop+LinesHeight);
 // Print rows
 Printer.Canvas.Font.Style:=[];
 for row := 0 to lwToSave.Items.Count - 1 do
  begin
   iTop:=iTop+LinesHeight;
   // new page
   if iTop>Printer.PageHeight-LinesHeight*3 then
    begin
     iTop:=LinesHeight*2;
     Printer.NewPage;
    end;
   Printer.Canvas.MoveTo(iLeft, iTop);
   Printer.Canvas.LineTo(iLeft, iTop+LinesHeight);
   for i := 0 to lwToSave.Items.Count - 1 do
    begin
     CellWidth:=LineShift*2+lwToSave.Columns[i].Width*WordWidth div ListViewWordWidth;
     Printer.Canvas.TextOut(iLeft+LineShift, iTop+LineShift, lwToSave.Items[i].Caption);
     Printer.Canvas.TextOut(iLeft+LineShift, iTop+LineShift, lwToSave.Items[i].SubItems[0]);
     //Printer.Canvas.TextOut(iLeft+LineShift, iTop+LineShift, lwToSave.Items[i].SubItems[1]);
     //Printer.Canvas.TextOut(iLeft+LineShift, iTop+LineShift, lwToSave.Items[i].SubItems[2]);
     //Printer.Canvas.TextOut(iLeft+LineShift, iTop+LineShift, lwToSave.Items[i].SubItems[3]);
     //Printer.Canvas.TextOut(iLeft+LineShift, iTop+LineShift, lwToSave.Items[i].SubItems[4]);
     //Printer.Canvas.TextOut(iLeft+LineShift, iTop+LineShift, lwToSave.Items[i].SubItems[5]);
     //Printer.Canvas.TextOut(iLeft+LineShift, iTop+LineShift, lwToSave.Items[i].SubItems[6]);
     if i=0 then
      Intro:=lwToSave.Items[row].Caption
     else
      Intro:=lwToSave.Items[row].SubItems[i-1];
     Printer.Canvas.TextRect(TextRect,1 ,1,Intro);
     iLeft := iLeft+CellWidth;
     Printer.Canvas.MoveTo(iLeft, iTop);
     Printer.Canvas.LineTo(iLeft, iTop+LinesHeight);
    end;
   iLeft := WordWidth*5;
   Printer.Canvas.MoveTo(iLeft, iTop);
   Printer.Canvas.LineTo(iLeft+LineWidth, iTop);
   Printer.Canvas.MoveTo(iLeft, iTop+LinesHeight);
   Printer.Canvas.LineTo(iLeft+LineWidth, iTop+LinesHeight);
  end;
 Printer.EndDoc;
end;

procedure TTableTeachersForm.PrintBtnClick(Sender: TObject);
begin
  PrintListView('Printing', TeacherListView);
end;

procedure TTableTeachersForm.changeLineBtnClick(Sender: TObject);
var i : integer;
begin
  if(countTeachers = 0) then ShowMessage('Изменение невозможно: таблица пуста.') else
    begin
      if(TeacherListView.Selected = NIL) then
        begin
          ShowMessage('Не выбрано поле для изменения!');
        end else
  if(flag = false) then
   begin
     NumberIdLabel.Caption:=self.TeacherListView.Selected.Caption;
     NewNameTeacher.Text:=self.TeacherListView.Selected.SubItems[0];
     NewAgeTeacher.Text:=self.TeacherListView.Selected.SubItems[1];
     NewSerialPassTeacher.Text:=self.TeacherListView.Selected.SubItems[2];
     NewNumberPassTeacher.Text:=self.TeacherListView.Selected.SubItems[3];
     NewEmailTeacher.Text:=self.TeacherListView.Selected.SubItems[4];
     NewTelephoneNumberTeacher.Text:=self.TeacherListView.Selected.SubItems[5];
     case NewDanceDirectionTeacher.ItemIndex of
      0:TeacherArray[countTeachers+1].DanceDirection:=HipHop;
      1:TeacherArray[countTeachers+1].DanceDirection:=Krump;
      2:TeacherArray[countTeachers+1].DanceDirection:=JFunk;
      3:TeacherArray[countTeachers+1].DanceDirection:=Break;
      4:TeacherArray[countTeachers+1].DanceDirection:=Improvis;
      5:TeacherArray[countTeachers+1].DanceDirection:=LadyHop;
      6:TeacherArray[countTeachers+1].DanceDirection:=Plastic;
      7:TeacherArray[countTeachers+1].DanceDirection:=Contemp;
      8:TeacherArray[countTeachers+1].DanceDirection:=BalDance;
      9:TeacherArray[countTeachers+1].DanceDirection:=VostokDance;
      10:TeacherArray[countTeachers+1].DanceDirection:=SportAcro;
    end;
     flag:=false;
     TableTeachersForm.Height:=260;
     TableTeachersForm.Width:=1015;
   end else if(flag = true) then
   begin
     flag:=false;
     TableTeachersForm.Height:=175;
     TableTeachersForm.Width:=1015;
   end;
end;
for i:= 1 to countTeachers do
 begin
   if(IntToStr(TeacherArray[i].idTeacher) = TeacherListView.Selected.Caption) then
    begin
      numEditingRec:=i;
    end;
 end;
end;

procedure TTableTeachersForm.TeacherListViewSelectItem(Sender: TObject;
  Item: TListItem; Selected: Boolean);
begin

end;

end.
